@page "/"
@inject CalendarViewModel ViewModel
@using toast_ui.blazor_calendar.Models
@implements IDisposable
@using System.ComponentModel;

<h1>Hello, world!</h1>

Welcome to your new app. <br />

<div class="btn-group m-2" role="group" aria-label="Basic example">
  <button type="button" @onclick=@(()=> ChangeCalendarView(TUICalendarViewName.Month)) class="btn btn-secondary">Month</button>
  <button type="button" @onclick=@(()=> ChangeCalendarView(TUICalendarViewName.Week)) class="btn btn-secondary">Week</button>
  <button type="button" @onclick=@(()=> ChangeCalendarView(TUICalendarViewName.Day)) class="btn btn-secondary">Day</button>
</div>
<br />
<div class="btn-group m-2" role="group" aria-label="Basic example">
  <button type="button" @onclick=@(async ()=> await MoveCalendarView(CalendarMove.Previous)) class="btn btn-secondary">Previous</button>
  <button type="button" @onclick=@(async ()=> await MoveCalendarView(CalendarMove.Today)) class="btn btn-secondary">Today</button>
  <button type="button" @onclick=@(async ()=> await MoveCalendarView(CalendarMove.Next)) class="btn btn-secondary">Next</button>
</div>

<div>@ViewModel.StartDate.GetValueOrDefault().LocalDateTime.ToShortDateString() - @ViewModel.EndDate.GetValueOrDefault().LocalDateTime.ToShortDateString()</div>

<TUICalendar Schedules ="ViewModel.Schedules" 
             CalendarOptions ="ViewModel.CalendarOptions" 
             CalendarProperties ="ViewModel.CalendarProps"
             CalendarViewName=ViewModel.CalendarViewName
             @bind-VisibleStartDateRange=ViewModel.StartDate
             @bind-VisibleEndDateRange=ViewModel.EndDate
             @ref=_calendarRef></TUICalendar>

<SurveyPrompt Title="How is Blazor working for you?" />

@code{
    private TUICalendar _calendarRef;


    protected override async Task OnInitializedAsync()
    {
        await ViewModel.InitCalendarDataAsync();
        ViewModel.PropertyChanged += OnPropertyChangedHandler;
    }

    async void OnPropertyChangedHandler(object sender, PropertyChangedEventArgs e)
    {
        await InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    private void ChangeCalendarView(TUICalendarViewName viewName)
    {
        ViewModel.CalendarViewName = viewName;
    }

    private async Task MoveCalendarView(CalendarMove move)
    {
        await _calendarRef.MoveCalendar(move);

    }

    public void Dispose()
    {
        ViewModel.PropertyChanged -= OnPropertyChangedHandler;
    }
}